syntax = "proto3";

package service.ourchat.v1;

import "service/ourchat/download/v1/download.proto";
import "service/ourchat/get_account_info/v1/get_account_info.proto";
import "service/ourchat/msg_delivery/recall/v1/recall.proto";
import "service/ourchat/msg_delivery/v1/msg_delivery.proto";
import "service/ourchat/session/accept_session/v1/accept_session.proto";
import "service/ourchat/session/add_role/v1/add_role.proto";
import "service/ourchat/session/get_session_info/v1/get_session_info.proto";
import "service/ourchat/session/new_session/v1/session.proto";
import "service/ourchat/session/set_role/v1/set_role.proto";
import "service/ourchat/session/set_session_info/v1/set_session_info.proto";
import "service/ourchat/set_account_info/v1/set_account_info.proto";
import "service/ourchat/unregister/v1/unregister.proto";
import "service/ourchat/upload/v1/upload.proto";

// Main service of the Ourchat
// JWT is required.If token is missing or out-of-dated,please refer to
// AuthService to authenticate one JWT Insert to headers: token: <token>
service OurChatService {
  // Warning: the meaning is deleting the account, not logout
  rpc Unregister(unregister.v1.UnregisterRequest) returns (unregister.v1.UnregisterResponse);

  // # Error
  // If you don't have the privilege, return error
  //
  // - PermissionDenied("Permission Denied") - If you don't have the privilege
  // - NotFound("User Not Found") - If the user does not exist
  // - InvalidArgument("Request Invalid Value") - If the request value is
  // invalid
  rpc GetAccountInfo(get_account_info.v1.GetAccountInfoRequest) returns (get_account_info.v1.GetAccountInfoResponse);

  // Set some information of the account
  //
  // # Error
  // - AlreadyExists("Conflict") - If the information should be set is conflict
  // - InvalidArgument("Ocid Too Long") - The ocid is too long to set
  rpc SetSelfInfo(set_account_info.v1.SetSelfInfoRequest) returns (set_account_info.v1.SetSelfInfoResponse);

  // # Error
  rpc SetFriendInfo(set_account_info.v1.SetFriendInfoRequest) returns (set_account_info.v1.SetFriendInfoResponse);

  // Turn on the delivery, continuing to receive messages
  //
  // # Error
  // - InvalidArgument("Time Format Error") - The structure of time cannot be
  // parsed
  // - InvalidArgument("Time Missing") - Member time is required
  rpc FetchMsgs(msg_delivery.v1.FetchMsgsRequest) returns (stream msg_delivery.v1.FetchMsgsResponse);

  // # Error
  // - PermissionDenied("Permission Denied") - If you don't have the privilege
  // to send message here
  // - NotFound("Session Not Found") - If the session you want to send message
  // to does not exist
  rpc SendMsg(msg_delivery.v1.SendMsgRequest) returns (msg_delivery.v1.SendMsgResponse);

  // # Error
  // - NotFound("User Not Found") - If the user does not exist
  // - InvalidArgument("File Size Error") - The size of the data received is not
  // equal to the size in metadata
  // - InvalidArgument("File Hash Error") - The hash of the data received is not
  // equal to the hash in metadata
  // - ResourceExhausted("Storage Full") - The storage is full
  // - InvalidArgument("Metadata Error") - The metadata is invalid or missing
  // - InvalidArgument("Incorrect Order Of Uploading") - You should upload a
  // package of metadata, then upload content package until process finish
  rpc Upload(stream upload.v1.UploadRequest) returns (upload.v1.UploadResponse);

  // # Error
  // - PermissionDenied("Permission Denied") - This file is not yours
  rpc Download(download.v1.DownloadRequest) returns (stream download.v1.DownloadResponse);

  // session operations

  // # Error
  rpc AcceptSession(session.accept_session.v1.AcceptSessionRequest) returns (session.accept_session.v1.AcceptSessionResponse);

  // # Error
  // - NotFound("User Not Found") - If the user you want to invite does not exist
  rpc NewSession(session.new_session.v1.NewSessionRequest) returns (session.new_session.v1.NewSessionResponse);

  // # Error
  // - NotFound("Session Not Found") - If the session you want to get information does not exist
  // - InvalidArgument("Request Invalid Value") - If the request value is invalid
  rpc GetSessionInfo(session.get_session_info.v1.GetSessionInfoRequest) returns (session.get_session_info.v1.GetSessionInfoResponse);

  // # Error
  // - AlreadyExists("Conflict") - If the information should be set is conflict
  // - PermissionDenied("Cannot Set Name") - If you don't have the privilege to set name
  // - PermissionDenied("Cannot Set Avatar") - If you don't have the privilege to set avatar
  // - PermissionDenied("Cannot Set Description") - If you don't have the privilege to set description
  rpc SetSessionInfo(session.set_session_info.v1.SetSessionInfoRequest) returns (session.set_session_info.v1.SetSessionInfoResponse);

  // # Error
  // - PermissionDenied("Permission Denied") - If you don't have the privilege
  // - NotFound("Message Not Found") - If the message you want to recall does not exist
  rpc RecallMsg(msg_delivery.recall.v1.RecallMsgRequest) returns (msg_delivery.recall.v1.RecallMsgResponse);

  // # Error
  // - PermissionDenied("Permission Denied") - If you don't have the privilege
  // - NotFound("User Not In Session") - If the user you want to set role is not in this session
  rpc SetRole(session.set_role.v1.SetRoleRequest) returns (session.set_role.v1.SetRoleResponse);

  // # Error
  rpc AddRole(session.add_role.v1.AddRoleRequest) returns (session.add_role.v1.AddRoleResponse);
}
